Title: Readme
  Content of Readme file.

Author:
  (c) 2010-2011 Jörg Seebohn

Web location:
  Free software project hosted at github:  https://github.com/je-so/js-projekt

about: Goal
  To develop a database with its own transactional programming language.
  Implementation language is C99. Currently different sub-projects
  integrated as one C-kern(el) are used to build up the
  whole system step by step.

about: State
  In planning.

  Phase           - Architecture and -design phase
  Simplifications - Linux-only support during development.
                    Some documentation is only in German during development.
                    Development system is Ubuntu 11.04 or later.
 
about: Current task
  Design Simple C-like language for declaring persistent content.

about: Subprojects
  List of codenamed subprojects.

Thor:
-----
  Being planned: - Handling of complex data structures.
                   To develop a transactional hierarchical object database
                   suitable to store context information gathered during parsing.
????:
-----
  Being planned: - Allow flexible syntax of language.
                   To develop a parser generator language which allows for
                   "change of syntax at runtime".

genX86:
-------
  Future idea: - Generate x86 code from generic Machinecode-Mnemonics
                 For testing: Compare result interpreted code vs. execution of
                 generated machine code.
  This subproject allows a later stage to translate database-language
  (Idea: extended + simplified C-code) into executeable code.

TextDB:
-------
  DONE: - Reads text database in CSV format and patches query result into C-source code.
          Used to manage initialization lists and to manage a list of unit-tests.
          Later it may be used to select a subset of platform functionality and for software configuration.
  Example: - The following code shows how the init and free functions (which should be called once at
             the start of the process) are patched into code. The list of functions is stored in the text database
             file 'C-kern/resource/text.db/initprocess'.
  > // TEXTDB:SELECT("   { &"init-function", &"free-function" },")FROM("C-kern/resource/text.db/initprocess")
  >    { &initprocess_locale, &freeprocess_locale },
  > // TEXTDB:END

Genmake:
--------
  DONE: - Automate builds. Uses simple project description and generates a makefile.
  Example: - The following example shows the project description of the text resource compiler.
  > include        projekte/binary.gcc
  > Src            = C-kern/main/tools/resource_textcompiler.c
  > Src           += C-kern/tools/hash.c
  > Includes       = .
  > Defines        =

textrescompiler:
----------------
  DONE: - Handle multilingual text resources
          Simple resource text compiler which generates ".h files"
          from text resources (C-kern/resource/errorlog.text).
  NEEDS IMPROVEMENT: - Simple text replacement is not enough for more complex langs.
                       Introduce algorithmic syntax (C-like syntax :-) => simple code generation)

about: License
  Free software license.
  Licensed under GNU General Public License v2 (see LICENSE),
  or (at your option) any later version.

about: Build
  Run 'make' in the top level directory.
  This should build all subprojects.

  The main makefile ('Makefile') calls for every subproject the corresponding 
  makefile in 'projekte/makefiles/'.

  To run all unit tests execute bin/testunit (release version)
  or bin/testunit_Debug.

Make targets:
  all      - Builds »Debug« and »Release« version of every subproject except »html«.
  html     - Generate documentation from source code with naturaldoc.
             You can view it by opening html/index.html in a browser.
  genmake  - Build genmake binaries: »bin/genmake« and »bin/genmake_Debug«.
  textrescompiler - Build resource compiler binaries: »bin/textrescompiler« and »bin/textrescompiler_Debug«.
  Debug    - Builds debug binaries of every subproject. The generated binaries are stored under directory 'bin/'.
             A binary is named after its corresponding project name plus an additional '_Debug' suffix.
  Release  - Builds release binaries of every subproject. The generated binaries are stored under directory 'bin/'.
             A binary is named after its corresponding project name without any additional suffix or prefix.

about: Documentation
  The documentation is extracted from the source files by naturaldoc.
  Type 'make html' to run it. Make sure you have installed v1.5 on your system.
  Type 'firefox html/index.html' to view it (replace firefox with your favourite browser).

about: Dependencies
  To build the whole project or any subproject the following dependencies should be considered.
  Libraries:
     * libpthread
     * librt
     * libX11 + libGL (X11 window subsystem branch)
  Tools:
     * 'Natural Docs v1.5' (www.naturaldocs.org).
  Development only:
     * Git      (http://git-scm.com).
     * Codelite (http://codelite.org).

about: Project-structure
  Explanation of directory structure.

  LICENSE     - GPL v2 license
  Makefile    - Top level makefile which calls project makefiles
  README      - This readme file
  C-kern/     - Contains all C99 source code and other resources, e.g. localized text
  C-kern/konfig.h     - Global configuration file (must be included by every source module)
  coding-conventions/ - A collection of design decisions
  projekte/           - Contains project descriptions suitable for Genmake
  projekte/makefiles/ - Contains generated makefiles
