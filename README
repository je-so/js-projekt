Title: Readme
  Content of Readme file of js-projekt.

License:
  Licensed under GNU General Public License v2 (see LICENSE),
  or (at your option) any later version.

Author:
  (c) 2010-2012 Jörg Seebohn

Web location:
  Free software project hosted at github:  https://github.com/je-so/js-projekt

Download:
  The newest source code (Linux version) can be downloaded from: http://github.com/je-so/js-projekt/zipball/master


section: Description

about: Goal

  To develop a database server and also a transactional general purpose programming language.
  The goal is to remove the impedance mismatch between computer languages and database backends.
  Implementation language is C99 (switch to C11 will be made if gcc supports it).
  During the design phase the development is done only on Linux.
  Development system is Ubuntu 11.04 or later.

about: State

  The current development is the architecture and design phase.
  The structure of the base system must support many users so the concurrency problem
  has to be solved in one way or another. One of the older technologies is a transaction
  processing monitor which can handle things like client-server communication, transaction
  context and the process management.


about: Developed Ideas

Subproject TextDB:

  Reads text database in CSV format and patches query result into C-source code.
  Used to manage initialization lists and to configure unix signal handlers.
  See directory "C-kern/resource/text.db/" for the textdb databases.

  Example:
  The following code shows how the init and free functions (which should be called once at the start of the process) are patched into code.
  The list of functions is stored in the text database file 'C-kern/resource/text.db/initprocess'.
  > // TEXTDB:SELECT(\n"   err = initonce_"module"("(if (parameter!="") "&pcontext->" else "")parameter") ;"\n"   if (err) goto ABBRUCH ;"\n"   ++ pcontext->initcount ;")FROM("C-kern/resource/text.db/initprocess")
  > ...
  > err = initonce_valuecache(&pcontext->valuecache) ;
  > if (err) goto ABBRUCH ;
  > ++ pcontext->initcount ;
  >
  > err = initonce_thread() ;
  > if (err) goto ABBRUCH ;
  > ++ pcontext->initcount ;
  > // TEXTDB:END

Subproject Genmake:

  Automate generation of makefiles. Genmake offers a simple project description and generates the
  corresponding makefile with all source code dependencies.

  Example:
  The following example shows the project description of the text resource compiler.
  > include        projekte/binary.gcc
  > Src            = C-kern/main/tools/resource_textcompiler.c
  > Src           += C-kern/tools/hash.c
  > Includes       = .
  > Defines        =

Subproject textrescompiler:

  Handle text resources for different languages.
  The textrescompiler generates generates C header from text resource files, e.g. "C-kern/resource/errorlog.text".  files which can be included in the project.
  The generated header files can be used to get text strings for different language.
  The type of language must be decided at compile time.

  NEEDS IMPROVEMENT:
  In a later this compiler will generate
  database files which allow then to switch the language support at runtime per user.

  Simple text replacement is not enough for more complex langs.
  Introduce algorithmic syntax (C-like syntax :-) => simple code generation)


section: Build

about: Make Command

  Run 'make' at the top level directory.
  This should build all subprojects.

  The main makefile ('Makefile') calls for every subproject the corresponding
  makefile in 'projekte/makefiles/'.

  To run all unit tests execute bin/testunit (release version)
  or bin/testunit_Debug.

about: Make Targets

  all      - Builds »Debug« and »Release« version of every subproject except »html«.
  Debug    - Builds debug binaries of every subproject. The generated binaries are stored under directory 'bin/'.
             A binary is named after its corresponding project name plus an additional '_Debug' suffix.
  Release  - Builds release binaries of every subproject. The generated binaries are stored under directory 'bin/'.
             A binary is named after its corresponding project name without any additional suffix or prefix.
  html     - Generate documentation from source code with naturaldoc.
             You can view it by opening html/index.html in a browser.
  genmake  - Build genmake binaries: »bin/genmake« and »bin/genmake_Debug«.
  testunit - Build test binaries »bin/testunit« and »bin/testunit_Debug« which run all unit tests of all
             devloped modules.
  textdb   - Build text database tool binaries: »bin/textdb[_Debug]«
  textrescompiler  - Build resource compiler binaries: »bin/textrescompiler[_Debug]«
  testchildprocess - Build test process »bin/testchildprocess[_Debug]« used in "unittest_platform_process".
  pp-textdb  - Runs the textdb tool to preprocess all C source files to patch the m with the content of
               the textdb database files.
  pp-textres - Runs the textrescompiler tool to preprocess all text resourc files and to generate
               the corresponding C header files.

about: Documentation
  The documentation is extracted from the source files by naturaldoc.
  Type 'make html' to run it. Make sure you have installed v1.5 on your system.
  Type 'firetestchildprocessfox html/index.html' to view it (replace firefox with your favourite browser).

about: Dependencies
  To build the whole project or any subproject the following dependencies should be considered.

  Libraries:
     Only the libraries *libpthread* for threading support and *librt* for realtime signal support are needed.
     These libararies should be available on any Linux version.

  For Development:
     * Git      (http://git-scm.com).
     * Codelite (http://codelite.org).
     * Natural Docs v1.5 (http://www.naturaldocs.org).

about: Project-structure
  Explanation of directory structure.

  LICENSE     - GPL v2 license
  Makefile    - Top level makefile which calls project makefiles
  README      - This readme file
  C-kern/     - Contains all C source code and other resources, e.g. localized text
  C-kern/api  - Contains all C header files (interfaces) of the implementation modules
  C-kern/konfig.h     - Global configuration file (must be included by every source module)
  coding-conventions/ - A textual description of the made design decisions
  projekte/           - Contains project descriptions suitable for Genmake
  projekte/makefiles/ - Contains generated makefiles
  projekte/codelite/  - Contains workspace & projects for the CodeLite IDE.
