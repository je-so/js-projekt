##
## ! Genmake generated Makefile !
##
ProjectName     := testmodule
ProjectModes    := Debug Release
ProjectFile     := projekte/testmodule.prj
ProjectLinks    := 

GenerationDate  := 2017.Mai.07  16:44:36
GeneratedBy     := JÃ¶rg Seebohn

## Debug
DefineFlag_Debug    := -D
IncludeFlag_Debug   := -I
LibraryFlag_Debug   := -l
LibPathFlag_Debug   := -L
CFlags_Debug        := -g -MMD -std=gnu1x -pedantic -Wall -Wextra -Wconversion -Wshadow -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wformat-nonliteral -Wformat-y2k -Wstrict-overflow=5 -fPIC
LFlags_Debug        := -g -shared -Wl,-Bsymbolic -fPIC -nostartfiles
Defines_Debug       := $(DefineFlag_Debug)KONFIG_SUBSYS=NONE
Includes_Debug      := $(IncludeFlag_Debug).
Libraries_Debug     :=
Libpath_Debug       :=
ObjectDir_Debug     := bin/Debug/testmodule
TargetDir_Debug     := bin/mod
Target_Debug        := bin/mod/testmodule_Debug.so
Libs_Debug          := $(Libpath_Debug) $(Libraries_Debug)
CC_Debug            = gcc $(Defines_Debug) $(Includes_Debug) $(CFlags_Debug) -c -o '$@' '$<'
LD_Debug            = gcc $(LFlags_Debug) -o '$@' $(foreach obj,$^,'$(obj)') $(Libs_Debug) ; projekte/tools/build_module_from_sharedlib.sh '$@'

## Release
DefineFlag_Release    := -D
IncludeFlag_Release   := -I
LibraryFlag_Release   := -l
LibPathFlag_Release   := -L
CFlags_Release        := -O2 -MMD -std=gnu1x -pedantic -Wall -Wextra -Wconversion -Wshadow -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wformat-nonliteral -Wformat-y2k -Wstrict-overflow=5 -fPIC
LFlags_Release        := -O2 -shared -Wl,-Bsymbolic -fPIC -nostartfiles
Defines_Release       := $(DefineFlag_Release)KONFIG_SUBSYS=NONE
Includes_Release      := $(IncludeFlag_Release).
Libraries_Release     :=
Libpath_Release       :=
ObjectDir_Release     := bin/Release/testmodule
TargetDir_Release     := bin/mod
Target_Release        := bin/mod/testmodule.so
Libs_Release          := $(Libpath_Release) $(Libraries_Release)
CC_Release            = gcc $(Defines_Release) $(Includes_Release) $(CFlags_Release) -c -o '$@' '$<'
LD_Release            = gcc $(LFlags_Release) -o '$@' $(foreach obj,$^,'$(obj)') $(Libs_Release) ; projekte/tools/build_module_from_sharedlib.sh '$@'

##
## Targets
##
all:   Debug Release
clean: clean_Debug clean_Release
init:  init_Debug init_Release
init_Debug: $(ObjectDir_Debug) $(TargetDir_Debug)
init_Release: $(ObjectDir_Release) $(TargetDir_Release)

Debug: init_Debug $(Target_Debug)

Release: init_Release $(Target_Release)

clean_Debug:
	@rm -f "$(ObjectDir_Debug)/"*.[od]
	@rm -f "$(Target_Debug)"
	@if [ -d "$(ObjectDir_Debug)" ]; then rmdir -p --ignore-fail-on-non-empty "$(ObjectDir_Debug)"; fi
	@if [ -d "$(TargetDir_Debug)" ]; then rmdir -p --ignore-fail-on-non-empty "$(TargetDir_Debug)"; fi

clean_Release:
	@rm -f "$(ObjectDir_Release)/"*.[od]
	@rm -f "$(Target_Release)"
	@if [ -d "$(ObjectDir_Release)" ]; then rmdir -p --ignore-fail-on-non-empty "$(ObjectDir_Release)"; fi
	@if [ -d "$(TargetDir_Release)" ]; then rmdir -p --ignore-fail-on-non-empty "$(TargetDir_Release)"; fi

$(sort $(ObjectDir_Debug) $(TargetDir_Debug) $(ObjectDir_Release) $(TargetDir_Release)):
	@mkdir -p "$@"

Objects_Debug := \
 $(ObjectDir_Debug)/C-kern!main!test!testmodule_main.c.o \
 $(ObjectDir_Debug)/C-kern!main!test!helper!testmodule_helper1.c.o

Objects_Release := \
 $(ObjectDir_Release)/C-kern!main!test!testmodule_main.c.o \
 $(ObjectDir_Release)/C-kern!main!test!helper!testmodule_helper1.c.o

$(Target_Debug): $(Objects_Debug)
	@$(LD_Debug)

$(Target_Release): $(Objects_Release)
	@$(LD_Release)

$(ObjectDir_Debug)/C-kern!main!test!testmodule_main.c.o: C-kern/main/test/testmodule_main.c
	@$(CC_Debug)

$(ObjectDir_Debug)/C-kern!main!test!helper!testmodule_helper1.c.o: C-kern/main/test/helper/testmodule_helper1.c
	@$(CC_Debug)

$(ObjectDir_Release)/C-kern!main!test!testmodule_main.c.o: C-kern/main/test/testmodule_main.c
	@$(CC_Release)

$(ObjectDir_Release)/C-kern!main!test!helper!testmodule_helper1.c.o: C-kern/main/test/helper/testmodule_helper1.c
	@$(CC_Release)

-include $(Objects_Debug:.o=.d)

-include $(Objects_Release:.o=.d)
