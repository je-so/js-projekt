/*
 * C header generated by textresource compiler v5
 *
 * Do not edit this file -- instead edit 'C-kern/resource/errlog.text'
 *
 */

struct p_ASSERT_FAILED_ERRLOG { const char * wrong_condition; };
void ASSERT_FAILED_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_ERROR_DESCRIPTION_ERRLOG { int err; };
void ERROR_DESCRIPTION_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_ERROR_IGNORED_ERRLOG;
void ERROR_IGNORED_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_FORMAT_WRONG_ERRLOG { const char * filename; };
void FILE_FORMAT_WRONG_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_NAME_ERRLOG { const char * workdir; const char * filename; };
void FILE_NAME_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_HEADER_NAME_ERRLOG { const char * filedir; const char * filename; };
void FILE_HEADER_NAME_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_HEADER_LINECOL_ERRLOG { const char * filedir; const char * filename; size_t linenr; size_t colnr; };
void FILE_HEADER_LINECOL_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_CREATE_ERRLOG { int err; const char * workdir; const char * filename; };
void FILE_CREATE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_OPEN_ERRLOG { int err; const char * workdir; const char * filename; };
void FILE_OPEN_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FILE_REMOVE_ERRLOG { int err; const char * workdir; const char * filename; };
void FILE_REMOVE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FUNCTION_CALL_ERRLOG { const char * funcname; int err; };
void FUNCTION_CALL_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FUNCTION_EXIT_ERRLOG { int err; };
void FUNCTION_EXIT_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FUNCTION_EXIT_FREE_RESOURCE_ERRLOG { int err; };
void FUNCTION_EXIT_FREE_RESOURCE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FUNCTION_SYSCALL_ERRLOG { const char * funcname; int err; };
void FUNCTION_SYSCALL_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_FUNCTION_WRONG_RETURNVALUE_ERRLOG { const char * funcname; const char * wrong_value; };
void FUNCTION_WRONG_RETURNVALUE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_LOCALE_SETLOCALE_ERRLOG;
void LOCALE_SETLOCALE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_LOGENTRY_HEADER_ERRLOG { size_t threadid; uint64_t sec; uint32_t usec; const char * funcname; const char * filename; int linenr; };
void LOGENTRY_HEADER_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_MEMORY_OUT_OF_ERRLOG { size_t size; int err; };
void MEMORY_OUT_OF_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_PARSEERROR_ENDOFINPUT_ERRLOG;
void PARSEERROR_ENDOFINPUT_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_PARSEERROR_ENDOFLINE_ERRLOG;
void PARSEERROR_ENDOFLINE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_PARSEERROR_ILLEGALCHARACTERENCODING_ERRLOG { const char * str; };
void PARSEERROR_ILLEGALCHARACTERENCODING_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_PARSEERROR_EXPECT_INSTEADOF_ERRLOG { const char * expect; const char * insteadof; };
void PARSEERROR_EXPECT_INSTEADOF_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_PARSEERROR_UNEXPECTED_CHAR_ERRLOG { const char * str; };
void PARSEERROR_UNEXPECTED_CHAR_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_PARSEERROR_EXPECT_ENDOFLINE_ERRLOG;
void PARSEERROR_EXPECT_ENDOFLINE_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_PARSEERROR_WRONG_FORMAT_ERRLOG;
void PARSEERROR_WRONG_FORMAT_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_PROGRAM_ABORT_ERRLOG { int err; };
void PROGRAM_ABORT_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_RESOURCE_USAGE_DIFFERENT_ERRLOG;
void RESOURCE_USAGE_DIFFERENT_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_OS_INSTALLED_SIGHANDLER_PRODUCES_UNDEFINED_BEHAVIOUR_ERRLOG { const char * signame; };
void OS_INSTALLED_SIGHANDLER_PRODUCES_UNDEFINED_BEHAVIOUR_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_VALIDATE_INPARAM_FAILED_ERRLOG { const char * violated_condition; };
void VALIDATE_INPARAM_FAILED_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_VALIDATE_INVARIANT_FAILED_ERRLOG { const char * violated_condition; };
void VALIDATE_INVARIANT_FAILED_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_VALIDATE_OUTPARAM_FAILED_ERRLOG { const char * violated_condition; };
void VALIDATE_OUTPARAM_FAILED_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_VALIDATE_STATE_FAILED_ERRLOG { const char * violated_condition; };
void VALIDATE_STATE_FAILED_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_THREAD_MAIN_ABORT_ERRLOG { size_t threadid; };
void THREAD_MAIN_ABORT_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
typedef void p_noarg_X11_DISPLAY_NOT_SET_ERRLOG;
void X11_DISPLAY_NOT_SET_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
struct p_X11_NO_CONNECTION_ERRLOG { const char * display_server_name; };
void X11_NO_CONNECTION_ERRLOG(struct logbuffer_t * logbuffer, void * _p);
