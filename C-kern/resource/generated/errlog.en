/*
 * C source code generated by textresource compiler v5
 *
 * Do not edit this file -- instead edit 'C-kern/resource/errlog.text'
 *
 */

void ASSERT_FAILED_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_ASSERT_FAILED_ERRLOG * p = _p;

   PRINTF("Assertion '%s' failed.\n", p->wrong_condition);
}

void ERROR_DESCRIPTION_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_ERROR_DESCRIPTION_ERRLOG * p = _p;

   PRINTF("Error %d - %s\n", p->err, str_static_errorcontext(p->err));
}

void ERROR_IGNORED_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   (void) _p;

   PRINTF("Error will be ignored\n");
}

void FILE_FORMAT_MISSING_ENDOFLINE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FILE_FORMAT_MISSING_ENDOFLINE_ERRLOG * p = _p;

   PRINTF("'%s' contains no newline\n", p->filename);
}

void FILE_FORMAT_WRONG_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FILE_FORMAT_WRONG_ERRLOG * p = _p;

   PRINTF("File '%s' has unknown format\n", p->filename);
}

void FILE_NAME_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FILE_NAME_ERRLOG * p = _p;

   PRINTF("File name '%s%s'\n", p->workdir, p->filename);
}

void FILE_CREATE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FILE_CREATE_ERRLOG * p = _p;

   PRINTF("Can not create file '%s%s' - %s\n", p->workdir, p->filename, str_static_errorcontext(p->err));
}

void FILE_OPEN_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FILE_OPEN_ERRLOG * p = _p;

   PRINTF("Can not open file '%s%s' - %s\n", p->workdir, p->filename, str_static_errorcontext(p->err));
}

void FILE_REMOVE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FILE_REMOVE_ERRLOG * p = _p;

   PRINTF("Can not remove file '%s%s' - %s\n", p->workdir, p->filename, str_static_errorcontext(p->err));
}

void FUNCTION_CALL_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FUNCTION_CALL_ERRLOG * p = _p;

   PRINTF("Function call '%s' failed with error %d\n", p->funcname, p->err);
}

void FUNCTION_EXIT_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FUNCTION_EXIT_ERRLOG * p = _p;

   PRINTF("Exit function with\nError %d - %s\n", p->err, str_static_errorcontext(p->err));
}

void FUNCTION_EXIT_FREE_RESOURCE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FUNCTION_EXIT_FREE_RESOURCE_ERRLOG * p = _p;

   PRINTF("One or more resources could not be freed\nExit function with\nError %d - %s\n", p->err, str_static_errorcontext(p->err));
}

void FUNCTION_SYSCALL_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FUNCTION_SYSCALL_ERRLOG * p = _p;

   PRINTF("System call '%s' failed with error %d\n", p->funcname, p->err);
}

void FUNCTION_WRONG_RETURNVALUE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_FUNCTION_WRONG_RETURNVALUE_ERRLOG * p = _p;

   PRINTF("Function '%s' returned wrong value (%s)\n", p->funcname, p->wrong_value);
}

void LOCALE_SETLOCALE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   (void) _p;

   PRINTF("Cannot change the current locale with setlocale\nRemedy: Please set environment variable LC_ALL to a supported value by the system\n");
}

void LOGENTRY_HEADER_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_LOGENTRY_HEADER_ERRLOG * p = _p;

   PRINTF("[%zu: %llu.%06us]\n%s() %s:%d\n", p->threadid, p->sec, p->usec, p->funcname, p->filename, p->linenr);
}

void MEMORY_OUT_OF_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_MEMORY_OUT_OF_ERRLOG * p = _p;

   PRINTF("Could not allocate %zu bytes of memory - error %d\n", p->size, p->err);
}

void PARSEERROR_EXPECTCHAR_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_PARSEERROR_EXPECTCHAR_ERRLOG * p = _p;

   PRINTF("Expect character '%s' in line: %zu, column: %zu\n", p->chr, p->linenr, p->colnr);
}

void PARSEERROR_EXPECTNEWLINE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_PARSEERROR_EXPECTNEWLINE_ERRLOG * p = _p;

   PRINTF("Expect '(newline)' in line: %zu, column: %zu\n", p->linenr, p->colnr);
}

void PROGRAM_ABORT_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_PROGRAM_ABORT_ERRLOG * p = _p;

   PRINTF("Abort process with fatal error\nError %d - %s\n", p->err, str_static_errorcontext(p->err));
}

void RESOURCE_USAGE_DIFFERENT_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   (void) _p;

   PRINTF("The number of used resources is different\n");
}

void STATE_WRONG_SIGHANDLER_DEFINED_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_STATE_WRONG_SIGHANDLER_DEFINED_ERRLOG * p = _p;

   PRINTF("The signal handler installed for signal «%s» possibly produces undefined behaviour.\n", p->signame);
}

void TEST_INPARAM_FALSE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_TEST_INPARAM_FALSE_ERRLOG * p = _p;

   PRINTF("Function input violates condition (%s)\n", p->violated_condition);
}

void TEST_INVARIANT_FALSE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_TEST_INVARIANT_FALSE_ERRLOG * p = _p;

   PRINTF("Internal state variables violate condition (%s)\n", p->violated_condition);
}

void TEST_OUTPARAM_FALSE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_TEST_OUTPARAM_FALSE_ERRLOG * p = _p;

   PRINTF("Function output violates condition (%s)\n", p->violated_condition);
}

void TEST_STATE_FALSE_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_TEST_STATE_FALSE_ERRLOG * p = _p;

   PRINTF("Operation allowed only in state (%s)\n", p->violated_condition);
}

void THREAD_MAIN_ABORT_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_THREAD_MAIN_ABORT_ERRLOG * p = _p;

   PRINTF("Abort main thread '%zu' with fatal error\n", p->threadid);
}

void X11_DISPLAY_NOT_SET_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   (void) _p;

   PRINTF("Default name of X11 display servers unknown\nPlease set environment variable »DISPLAY«\n");
}

void X11_NO_CONNECTION_ERRLOG(struct logbuffer_t * logbuffer, void * _p)
{
   struct p_X11_NO_CONNECTION_ERRLOG * p = _p;

   PRINTF("Can not connect to X11 display server '%s'\n", p->display_server_name);
}
