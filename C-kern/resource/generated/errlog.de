/*
 * C source code generated by textresource compiler v3
 *
 * Do not edit this file -- instead edit 'C-kern/resource/errlog.text'
 *
 */

int ABORT_FATAL_ERRLOG(log_channel_e channel)
{
   PRINTF("Programmabbruch wegen fatalem Fehler\n") ;
   return 0;
}

int ABORT_ASSERT_FAILED_ERRLOG(log_channel_e channel, const char * wrong_condition)
{
   PRINTF("Assertion '%s' fehlgeschlagen.\n", wrong_condition) ;
   return 0;
}

int ERROR_LOCATION_ERRLOG(log_channel_e channel, size_t thread_id, const char * funcname, const char * filename, int linenr, int err)
{
   PRINTF("[Thread %zu]\n%s() %s:%d\nFehler %d - ", thread_id, funcname, filename, linenr, err) ;
   return 0;
}

int FILE_FORMAT_MISSING_ENDOFLINE_ERRLOG(log_channel_e channel, const char * filename)
{
   PRINTF("'%s' enthält kein Zeilenendezeichen\n", filename) ;
   return 0;
}

int FILE_FORMAT_WRONG_ERRLOG(log_channel_e channel, const char * filename)
{
   PRINTF("Datei '%s' besitzt unbekanntes Format\n", filename) ;
   return 0;
}

int FUNCTION_ABORT_ERRLOG(log_channel_e channel)
{
   PRINTF("Funktion abgebrochen\n") ;
   return 0;
}

int FUNCTION_ABORT_FREE_ERRLOG(log_channel_e channel)
{
   PRINTF("Freigabe einer Ressource schlug fehl\n") ;
   return 0;
}

int FUNCTION_ERROR_ERRLOG(log_channel_e channel, const char * funcname, const char * errstr)
{
   PRINTF("Funktionsaufruf '%s' meldet Fehler '%s'\n", funcname, errstr) ;
   return 0;
}

int FUNCTION_SYSERR_ERRLOG(log_channel_e channel, const char * funcname, const char * errstr)
{
   PRINTF("Systemaufruf '%s' meldet Fehler '%s'\n", funcname, errstr) ;
   return 0;
}

int FUNCTION_WRONG_RETURNVALUE_ERRLOG(log_channel_e channel, const char * funcname, const char * wrong_value)
{
   PRINTF("Funktion '%s' liefert falschen Rückgabewert (%s)\n", funcname, wrong_value) ;
   return 0;
}

int LOCALE_SETLOCALE_ERRLOG(log_channel_e channel)
{
   PRINTF("Kann die Lokalisierung mit setlocale nicht setzen\nAbhilfe: Bitte die Umgebungsvariable LC_ALL auf einen vom System unterstützten Wert setzen\n") ;
   return 0;
}

int LOG_ENTRY_TRUNCATED_ERRLOG(log_channel_e channel, int before_size, int after_size)
{
   PRINTF("Logeintrag gekürzt von %d auf %d Bytes\n", before_size, after_size) ;
   return 0;
}

int MEMORY_OUT_OF_ERRLOG(log_channel_e channel, size_t size)
{
   PRINTF("Keine %zu Bytes Speicher mehr frei\n", size) ;
   return 0;
}

int PARSEERROR_EXPECTCHAR_ERRLOG(log_channel_e channel, size_t linenr, size_t colnr, const char * chr)
{
   PRINTF("Erwarte Zeichen '%s' in Zeile: %zu, Spalte: %zu\n", chr, linenr, colnr) ;
   return 0;
}

int PARSEERROR_EXPECTNEWLINE_ERRLOG(log_channel_e channel, size_t linenr, size_t colnr)
{
   PRINTF("Erwarte '(Zeilenende)' in Zeile: %zu, Spalte: %zu\n", linenr, colnr) ;
   return 0;
}

int RESOURCE_USAGE_DIFFERENT_ERRLOG(log_channel_e channel)
{
   PRINTF("Ungleiche Anzahl benutzter Ressourcen\n") ;
   return 0;
}

int TEST_INPARAM_FALSE_ERRLOG(log_channel_e channel, const char * violated_condition)
{
   PRINTF("Eingabewert verletzt Bedingung (%s)\n", violated_condition) ;
   return 0;
}

int TEST_INVARIANT_FALSE_ERRLOG(log_channel_e channel, const char * violated_condition)
{
   PRINTF("Interne Zustandsvariablen verletzen Bedingung (%s)\n", violated_condition) ;
   return 0;
}

int TEST_OUTPARAM_FALSE_ERRLOG(log_channel_e channel, const char * violated_condition)
{
   PRINTF("Ausgabewert verletzt Bedingung (%s)\n", violated_condition) ;
   return 0;
}

int TEST_STATE_FALSE_ERRLOG(log_channel_e channel, const char * violated_condition)
{
   PRINTF("Operation nur erlaubt im Zustand (%s)\n", violated_condition) ;
   return 0;
}

int X11_DISPLAY_NOT_SET_ERRLOG(log_channel_e channel)
{
   PRINTF("Name des X11 Display-Servers nicht bekannt\nBitte die Umgebungsvariable »DISPLAY« setzen\n") ;
   return 0;
}

int X11_NO_CONNECTION_ERRLOG(log_channel_e channel, const char * display_server_name)
{
   PRINTF("Keine Verbindung zu X11 Display-Server '%s'\n", display_server_name) ;
   return 0;
}
