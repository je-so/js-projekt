title: Context Oriented Programming

A singleton called g_maincontext defines the global program context.

about: Context Types
* The process of a running program and its associated
threads all have a corresponding context object.
* Every thread has its own object of type <threadcontext_t>
and the process its corresponding <processcontext_t>.
* Every global service, object or subsystem must be accessed through a
pointer in either the process or thread context.

Every service which can be accessed from the processcontext_t
shall be programmed in thread safe way. Every service which
is referenced only from threadcontext_t is already thread safe
cause only one thread calls this service. This means that every
service in threadcontext_t must be duplicated for every running thread.

about: Accessing Context
The process context (<processcontext_t>) can be accessed with <process_maincontext>.
The thread context (<threadcontext_t>) can be accessed with <thread_maincontext>.
The returned process context is the same for every thread. Every thread has its own
thread context.

about: Main Thread
The main thread which executes the function "int main()"
and which is created implicitly by the operating system must
call the function <init_maincontext> to initialize the <processcontext_t>
and its <threadcontext_t>.

The difference between the main and any other threads is
that only the main thread calls <init_maincontext> which in turn initializates
all subsystems of the C-kernel. This initialization has to be done only once.

Before the main thread exits (after all other threads have exited)
it should call <free_maincontext> to make sure all resources are freed.

about: Other Threads
Any additional created thread must call <init_threadcontext>
at its beginning and <free_threadcontext> at its end.
The thread module implementation does this automatically.
Use <new_thread> and <delete_thread> for managing additional threads.

about: Internal Workings
The function <init_maincontext> calls <init_processcontext> and <init_threadcontext>.

The function <init_processcontext> calls all functions with patterns
"int initonce_NAME(void)" / "int initonce_NAME(service_t**)"
defined in any submodule in the same order as defined in
"C-kern/resource/text.db/initprocess".

The function <init_threadcontext> calls all functions with pattern
"int initthread_NAME(service_t**)" defined in any submodule
in the same order as defined in "C-kern/resource/text.db/initthread".

This init database can be checked against the whole source tree with
"C-kern/test/static/check_textdb.sh" - so that no entry is forgotten.
