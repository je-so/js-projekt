title: C-Types

Describes naming of user defined Ansi C types.

group: List of Types

The following list shows the suffixes of a type name and on the right side what kind of type
this suffix stands for.

Name&suffix     -  *Description*
typename_t      -  _struct_ or _primitive_ type
typename_f      -  _function pointer_ type
typename_e      -  _enum_ type
typename_it     -  _interface_ type
typename_iot    -  _implementation object_ type (implementing typename_it)

group: Enum Example

(start code)
enum process_state_e {
    process_state_RUNNABLE
   ,process_state_STOPPED
   ,process_state_TERMINATED
   ,process_state_ABORTED
} ;

typedef enum process_state_e        process_state_e ;
(end code)

group: Struct & Function Pointer Example

(start code)

struct callback_param_t ;

typedef int                      (* task_callback_f) (struct callback_param_t * start_arg) ;

typedef struct task_callback_t      task_callback_t  ;

struct task_callback_t {
   task_callback_f            fct ;
   struct callback_param_t  * arg ;
} ;

(end code)

group: Interface Example

The structure *log_it* defines the function table, i.e. the interface.

The structure *log_iot* defines a pointer to an imlementation object,
which can be manipulated by this kind of interface and a pointer to an implementation of that interface.

(start code)
struct log_it {
   void  (*printf)      (void * log, const char * format, ... ) __attribute__ ((__format__ (__printf__, 2, 3))) ; \
   void  (*flushbuffer) (void * log) ;                                      \
   void  (*clearbuffer) (void * log) ;                                      \
   void  (*getbuffer)   (void * log, /*out*/char ** buffer, /*out*/size_t * size) ; \
} ;

struct log_iot {
   void   * object ;
   log_it * interface ;
} ;
(end code)




