title: Umgebung (oriented programming)

»Umgebung« is the German word for context or environment.

Every thread has its own object of <umgebung_t>.
All global services must be accessed through this context.

This means for all service types except interthread or
interprocess communication types could be programmed
without making use of locking mechanisms or other
means to make them thread safe.

about: Accessing Umgebung
The object of type <umgebung_t> is accessed with <umgebung>.
For every thread another copy is returned.

about: Main thread
The main thread which calls the function "int main()"
and which is created by the operating system must
call the function <initmain_umgebung>
to initialize the context for the main thread.

The difference between the main and other threads is
that it calls all subsystem initialization functions
which has to be called only once.

Before the main thread exits (after all other threads
have exit) it should call <freemain_umgebung> to make
sure all resources are freed.

about: Other threads
Any additional created thread must call <init_umgebung>
at its beginning and <free_umgebung> at its end.
The thread module implementation does this automatically.
Use <new_thread> and <delete_thread> for managing
additional threads.

about: Internal workings of initmain
The function <initmain_umgebung> calls all functions
of pattern "int initonce_NAME(void)" / "int initonce_NAME(umgebung_t*)
defined in any submodule in the same order as defined in
"C-kern/resource/text.db/initonce".
The initonce functions with no parameter are called before the main processing environment
(umgebung_t) is operational. The functions with parameter of type "umgebung_t*" are
called after the main umgebung is operational.
This init database is checked against the whole source tree with
"C-kern/test/static/check_textdb.sh" - so that no entry is forgotten.

about: Internal workings of initumgebung
The function <init_umgebung> calls all functions
of pattern "int initumgebung_NAME(type **)" defined in any submodule
in the same order as defined in "C-kern/resource/text.db/initumgebung".
This init database is checked against the whole source tree with
"C-kern/test/static/check_textdb.sh".
So that no entry is forgotten.
