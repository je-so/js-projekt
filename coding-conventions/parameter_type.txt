title: parameter types

Desctribes the different parameter types of functions.

group: Different Types

There exist four kind of parameter types.
Function parameters are distinguished according to their direction of information flow.

/*in*/    - Input parameter. The value is read by the called function but not changed.
            If it accepts only a pointer to the value the parameter should be marked with
            *const* (const type_t * value). To flag it with the label /*in*/ is redundant.
/*inout*/ - This kind of parameter is read from as well as written to.
            Marking it with label /*inout*/ is redundant, cause every pointer to a non-const
            value is considered to be inout, provided that is not assigned a label indicating otherwise.
            The returned value is only valid, if the function returns success.
            In case of an error the value should be left untouched.
/*out*/   - The parameter is only written to. It carries the result value of a function and
            is only valid if the function returns success. In case of an error the out parameter
            is never changed. In case of a complex init function which can carry its operation
            out only on the original out parameter it is allowed to operate on the out parameter directly.
            In case the coomplex operation fails at some point in time the init function must ensure that
            the out parameter is reset to a FREEABLE (free can called without error) state.
/*err*/   - This parameter is only written to and conveys an extended error description.
            The returned value is only valid if the function returns an error.
            In case of success this value is never changed.

group: Examples

about: Function initializing an object

> extern int init_slist( /*out*/slist_t * list ) ;
> int err ;
> slist_t list ;
> err = init_slist( &list ) ;
> if (err) { printf("error\n") ; }

about: Extended Error Description

> extern int new_regexpression(
>    /*out*/regexpression_t    ** regex,
>    /*err*/regexpression_err_t * syntax_err,
>           const char          * definition ) ;
> int err ;
> regexpression_err_t syntax_err ;
> regexpression_t   * regex = 0 ;
> err = new_regexpression( &regex, &syntax_err, ".*:[0-9]*: .*") ;
> if (err) { /* check syntax_err for extended error information about syntax error */ ... }




